from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command, CommandStart, CommandObject
from datetime import datetime
from database import add_application
from config import ADMIN_ID

router = Router()

# –ö–∞—Ä—Ç–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è deep link
PRODUCT_MAP = {
    'dabudu': '–î–∞–±—É–¥—É - –•—Ä–∞–Ω–∏—Ç–µ–ª—å –ú–µ—á—Ç—ã',
    'luminus': '–õ—é–º–∏–Ω—É—Å - –°—Ç—Ä–∞–∂ –°–≤–µ—Ç–∞',
    'dabldooo': '–î–∞–±–ª –î–æ–æ–æ - –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –°—Ç—Ä–∞—Ö–æ–≤',
    'triostrazha': '–ù–∞–±–æ—Ä "–¢—Ä–∏ –°—Ç—Ä–∞–∂–∞"',
    'dabudupremium': '–î–∞–±—É–¥—É –ü—Ä–µ–º–∏—É–º',
    'startnabor': '–°—Ç–∞—Ä—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä'
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
main_keyboard = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")],
    [KeyboardButton(text="üìä –û —Ç–æ–≤–∞—Ä–µ"), KeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏")],
    [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
], resize_keyboard=True)

class OrderForm(StatesGroup):
    """
    –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–±–æ—Ä–∞ –∑–∞—è–≤–∫–∏.
    """
    full_name = State()
    phone = State()
    email = State()
    product_interest = State()
    quantity = State()
    additional_info = State()

@router.message(CommandStart())
async def start_handler(message: Message, state: FSMContext, command: CommandObject):
    await state.clear()
    args = command.args

    if args and args in PRODUCT_MAP:
        product_name = PRODUCT_MAP[args]
        await state.update_data(product_interest=product_name, source=args)
        await state.set_state(OrderForm.full_name)
        await message.answer(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DabuDu Store!\n\n"
            f"–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ **{product_name}**. –û—Ç–ª–∏—á–Ω–æ!\n\n"
            "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
            parse_mode="Markdown"
        )
    else:
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DabuDu Store!\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –Ω–∞—à —Ç–æ–≤–∞—Ä –∏ —É–∑–Ω–∞—Ç—å –æ –Ω–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ 'üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!",
            reply_markup=main_keyboard
        )

@router.message(F.text == "üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
@router.message(Command("order"))
async def order_handler(message: Message, state: FSMContext):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–±–æ—Ä–∞ –∑–∞—è–≤–∫–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await state.set_state(OrderForm.full_name)
    await message.answer("üìù –û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –æ—Ñ–æ—Ä–º–∏–º –≤–∞—à—É –∑–∞—è–≤–∫—É.\n\n–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏–ª–∏ –§–ò–û")

@router.message(OrderForm.full_name)
async def process_name(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
    """
    await state.update_data(full_name=message.text)
    await state.set_state(OrderForm.phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")

@router.message(OrderForm.phone)
async def process_phone(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç email.
    """
    await state.update_data(phone=message.text)
    await state.set_state(OrderForm.email)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å').")

@router.message(OrderForm.email)
async def process_email(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç email –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–æ–≤–∞—Ä.
    """
    if message.text.lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        await state.update_data(email=message.text)
    else:
        await state.update_data(email='-')
        
    user_data = await state.get_data()
    if 'product_interest' in user_data:
        await state.set_state(OrderForm.quantity)
        await message.answer("–ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?")
    else:
        await state.set_state(OrderForm.product_interest)
        await message.answer("–ö–∞–∫–æ–π —Ç–æ–≤–∞—Ä –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?")

@router.message(OrderForm.product_interest)
async def process_product_interest(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–æ–≤–∞—Ä –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.
    """
    await state.update_data(product_interest=message.text)
    await state.set_state(OrderForm.quantity)
    await message.answer("–ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?")

@router.message(OrderForm.quantity)
async def process_quantity(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
    """
    await state.update_data(quantity=message.text)
    await state.set_state(OrderForm.additional_info)
    await message.answer("–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è? (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç')")

@router.message(OrderForm.additional_info)
async def process_additional_info(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞—è–≤–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    """
    if message.text.lower() != '–Ω–µ—Ç':
        await state.update_data(additional_info=message.text)
    else:
        await state.update_data(additional_info='-')

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    user_data = await state.get_data()
    user_data['user_id'] = message.from_user.id
    user_data['username'] = message.from_user.username or '-'
    user_data['created_at'] = datetime.now()
    if 'source' not in user_data:
        user_data['source'] = 'telegram'
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    application_id = await add_application(user_data)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        f"‚úÖ –ó–∞—è–≤–∫–∞ ‚Ññ{application_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n"
        f"üìã –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
        f"üë§ –ò–º—è: {user_data['full_name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}\n"
        f"üìß Email: {user_data.get('email', '-')}\n"
        f"üõç –¢–æ–≤–∞—Ä: {user_data['product_interest']}\n"
        f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {user_data['quantity']}\n\n"
        "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤!",
        reply_markup=main_keyboard
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    if ADMIN_ID:
        admin_message = (
            f"üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚Ññ{application_id} (–ò—Å—Ç–æ—á–Ω–∏–∫: {user_data['source']})\n\n"
            f"üë§ –ò–º—è: {user_data['full_name']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}\n"
            f"üìß Email: {user_data.get('email', '-')}\n"
            f"üõç –¢–æ–≤–∞—Ä: {user_data['product_interest']}\n"
            f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {user_data['quantity']}\n"
            f"üìù –ü–æ–∂–µ–ª–∞–Ω–∏—è: {user_data['additional_info']}\n"
            f"üë§ Telegram: @{user_data['username']} (ID: {user_data['user_id']})"
        )
        await message.bot.send_message(ADMIN_ID, admin_message)

    await state.clear()

@router.message(F.text == "üìä –û —Ç–æ–≤–∞—Ä–µ")
async def about_product(message: Message):
    await message.answer(
        "**–í—Å–µ–ª–µ–Ω–Ω–∞—è –î–∞–±—É–¥—É** ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∏–≥—Ä—É—à–∫–∏, –∞ –Ω–∞—Å—Ç–æ—è—â–∏–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∏ –¥–ª—è –≤–∞—à–∏—Ö –¥–µ—Ç–µ–π! "
        "–ö–∞–∂–¥—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤: —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.\n\n"
        "–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –º–æ–∂–Ω–æ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ: [—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç]", 
        parse_mode="Markdown"
    )

@router.message(F.text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏")
async def contact_us(message: Message):
    await message.answer(
        "–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏:\n\n"
        "üìß Email: Support@dabudu.store\n"
        "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 123-45-67\n"
        "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∑–¥–µ—Å—å, –∏ –º—ã —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏–º!"
    )

@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
@router.message(Command("help"))
async def help_handler(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å". –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
    """
    await message.answer(
        "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
        "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/order - –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"
    )

@router.message(Command("cancel"))
@router.message(F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_handler(message: Message, state: FSMContext):
    """
    –û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.", reply_markup=main_keyboard)
        return

    await state.clear()
    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=main_keyboard,
    )

# –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º
@router.message()
async def any_other_message(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –¥—Ä—É–≥–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º.
    """
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã, –Ω–µ –ø–µ—Ä–µ–±–∏–≤–∞–µ–º –µ–≥–æ
    if await state.get_state() is not None:
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–¥—Å–∫–∞–∑–æ–∫, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–∑–∞—Å—Ç—Ä—è–ª"
        return

    await message.answer("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ.", reply_markup=main_keyboard) 